// ----------------------------------------------------------------------------
// plugins
// ----------------------------------------------------------------------------
plugins {
    // See https://github.com/diffplug/spotless-changelog
    id 'com.diffplug.spotless-changelog' version '2.4.0'
    id 'com.diffplug.spotless' version '6.2.0'

    // This plugin helps collate findings between the subprojects
    id 'org.kordamp.gradle.jacoco' version '0.47.0'

    // This plugin renders a test results summary line to the console
    id 'org.kordamp.gradle.testing' version '0.47.0'

    id 'java'
    // id 'idea' -- don't use. This drops an IML and IPR file inside each module, making things a mess
    id 'jacoco'

    // See https://docs.gradle.org/current/userguide/jvm_test_suite_plugin.html
    // Gradle's built-in test suite plugin
    id 'jvm-test-suite'
    // These 2 plugins require gradle:7.4-rc-1
    // ./gradlew wrapper --gradle-version=7.4-rc-1
    id 'test-report-aggregation'
    id 'jacoco-report-aggregation'

    // this enables lombok
    id 'io.freefair.lombok' version '6.3.0'

    // Integration test plugin
    // id "com.coditory.integration-test" version "1.3.0"

    // provides detailed test reports
    // This plugin seems to hide the output of integrationTests or, at least,
    // not make the results of integrationTests obvious.
    // id "com.monnage.test-report" version "1.4"

    // creates a 'fat-jar' (one-jar)
    id "com.github.johnrengelman.shadow" version "7.1.2"

    id "org.sonarqube" version "3.3"

    id "com.github.ben-manes.versions" version "0.41.0"
}

// -------------------------------------
// repositories
// -------------------------------------
repositories {
  mavenCentral()
  }


// standard project set-up
apply from: "gradle/standard-setup.gradle"

spotlessChangelog {
    changelogFile 'CHANGELOG.md'
    enforceCheck true
    }

// ----------------------------------------------------------------------------
// Enforce Java 17
// (java 17 is not absolutely required)
// ----------------------------------------------------------------------------
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// This configuration creates an integrationTest source set, integration test
// dependency configurations, and an integrationTest task.
// From: https://tomgregory.com/gradle-integration-tests/#Setup_your_Gradle_project_for_integration_tests
testing {
    suites {
        test {
            useJUnitJupiter()
        }
        integrationTest(JvmTestSuite) {
            sources {
                java {
                    srcDirs = [ 'src/integrationTest/java' ]
                }
            }
            dependencies {
                implementation project
            }
            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }
    }
}

// Ensure integration tests run when the 'check' task runs
tasks.named('check') {
    dependsOn(testing.suites.integrationTest)
}

// ----------------------------------------------------------------------------
// basics
// ----------------------------------------------------------------------------
group 'mmm.coffee.metacode'
version 'alpha'

allprojects {
  repositories {
    mavenCentral()
    }

  apply plugin: 'java'
  apply plugin: 'jacoco'
  // apply plugin: 'com.coditory.integration-test'
  apply plugin: 'io.freefair.lombok'

  configurations.all {
      // See https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.ResolutionStrategy.html
      resolutionStrategy {
          // fail fast on version conflicts (including transitive dependencies)
          // failOnVersionConflict()

          // cache dynamic versions for 10 minutes
          cacheDynamicVersionsFor 10*60, 'seconds'
          // don't cache changing modules at all
          cacheChangingModulesFor 0, 'seconds'
      }
  }
}

dependencies {
    implementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
}

// ----------------------------------------------------------------------------
// Sub-projects
// ----------------------------------------------------------------------------
subprojects {
    tasks.withType(Test) {
        // Ensure Junit5 is used
        useJUnitPlatform()
        testLogging { events "passed", "skipped", "failed" }
    }

    sonarqube {
        properties {
            property "sonar.sources", "src/main"
            property "sonar.tests", [ "src/test", "src/integrationTest" ]
            property "sonar.coverage.jacoco.xmlReportPaths",[
                    "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml",
                    "${project.buildDir}/reports/jacoco/integrationTest/jacocoTestReport.xml" ]
        }
    }
}

// ----------------------------------------------------------------------------
// Make all tests use JUnit5
// ----------------------------------------------------------------------------
tasks.withType(Test) {
    useJUnitPlatform()
    testLogging { events "passed", "skipped", "failed" }
}

// ----------------------------------------------------------------------------
// Define an allIn task run compile thru to sonarqube
// ----------------------------------------------------------------------------
task allIn(type: GradleBuild) {
    group = 'Build'
    description = 'Run a complete build and test cycle, then publish to SonarQube.'
    tasks = [ 'clean', 'build', 'integrationTest', 'jacocoTestReport', 'sonarqube' ]
}
