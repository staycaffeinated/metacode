plugins {
    id "org.kordamp.gradle.integration-test" version "0.47.0"
}

apply plugin: 'application'

application {
    //mainClass.set("mmm.coffee.zen.cli.CodeZenApplication")
    mainClassName = "mmm.coffee.metacode.cli.Application" // shadowJar needs this syntax
    applicationName = 'metacode'
}

apply from: "../gradle/java-conventions.gradle"

// --------------------------------------------------------------
// The shadowJar plugin creates an uber-jar for us
// --------------------------------------------------------------
apply plugin: 'com.github.johnrengelman.shadow'
shadowJar {
    archiveBaseName.set('metacode')
    manifest {
        // note: ManifestVersionProvider has a dependency on the impl-title's value
        attributes "Implementation-Title": "MetaCode"
        // note: the 'version' is defined in this component's gradle.properties
        attributes "Implementation-Version": version
    }
}

// ----------------------------------------------------------------
// When the distribution tar/zip file is the published artifact,
// a jar is included for each module: the tar/zip file contains
// a 'lib/meta-annotations-x.y.z.jar, lib/meta-cli-x.y.z.jar,
// lib/meta-common-x.y.z.jar, and so on. The gist is, there's no
// primary MANIFEST.MF file like the one found in an uber jar
// (as generated by shadowjar). PicoCLI expects to find _some_
// MANIFEST file that reveals the implementation-version of
// MetaCode. We'll put that in the meta-cli-x.y.z.jar's manifest.
// ----------------------------------------------------------------
jar {
    manifest {
        attributes "Implementation-Title": "MetaCode"
        attributes "Implementation-Version": version
    }
}

// --------------------------------------------------------------
// Dependencies
// --------------------------------------------------------------
dependencies {
    implementation project (path: ':meta-common' )
    implementation project (path: ':meta-spring-generator')
    implementation project (path: ':meta-annotations')
    implementation libs.picocli
    implementation libs.guice

    testImplementation ( platform(libs.junitBillOfMaterial) )
    testImplementation ( libs.junitJupiter )
    testImplementation ( libs.junitSystemRules )
    testImplementation ( libs.truth )
    testImplementation ( libs.commonsBeanUtils )
    testImplementation ( libs.mockito )
    testImplementation ( libs.systemLambda )
}

