/*
 * Copyright 2022 Jon Caulfield
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package mmm.coffee.metacode.cli.create.project;

import mmm.coffee.metacode.cli.mixin.DryRunOption;
import mmm.coffee.metacode.cli.traits.CallTrait;
import mmm.coffee.metacode.cli.validation.ValidationTrait;
import picocli.CommandLine;

/**
 * Common CLI elements of a REST project
 */
public abstract class AbstractCreateRestProject implements CallTrait {
    @CommandLine.Spec
    CommandLine.Model.CommandSpec commandSpec;  // injected by picocli

    @CommandLine.Mixin
    DryRunOption dryRunOption; // visible for testing

    // The groupId can be defaulted to match the base package
    @CommandLine.Option(names = {"-g", "--group"},
            description = "The project's group-id (i.e., the library coordinates)",
            paramLabel = "GROUP_ID")
    String groupId;  // package-visible for testing

    /**
     * This is the name of the artifact to be generated by the project.
     */
    @CommandLine.Option(names = {"-n", "--name"},
            description = "The application name",
            required = true,
            paramLabel = "APPLICATION_NAME")
    String applicationName; // visible for testing

    /**
     * This is the base Java package to apply to the generated Java files
     */
    @CommandLine.Option(names = {"-p", "--package"},
            description = "The base Java package for this project; for example: 'org.example.widget'",
            required = true,
            paramLabel = "JAVA_PACKAGE")
    String packageName; // visible for testing

    /**
     * This is the base URL to the running application.
     */
    @CommandLine.Option(names = {"-r", "--route", "--base-path"},
            description = "The base path (URL) of this application; for example: '/petstore",
            defaultValue = "/",
            paramLabel = "BASE_PATH")
    String basePath; // visible for testing

    /**
     * This is the base URL to the running application.
     */
    @CommandLine.Option(names = {"-S", "--schema"},
            description = "The database schema; for example: 'petstore'",
            paramLabel = "SCHEMA")
    String schema; // visible for testing


    /**
     * Verify the command line values
     * @throws CommandLine.ParameterException if an error is encountered
     */
    protected void runValidations(ValidationTrait... validations) {
        StringBuilder sb = new StringBuilder();
        for (ValidationTrait validator : validations) {
            if (validator.isInvalid()) {
                sb.append(validator.errorMessage()).append("\n");
            }
        }
        // If any errors were found, throw an exception
        if (sb.length() != 0) {
            throw new CommandLine.ParameterException( commandSpec.commandLine(), sb.toString());
        }
    }
}
